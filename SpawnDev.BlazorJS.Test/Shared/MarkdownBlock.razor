@using Markdig
@using Microsoft.AspNetCore.Components
@using System.Text;
@using System.Text.RegularExpressions;

<div>
    @((MarkupString)_markup)
</div>

@code {
    [Inject]
    HttpClient httpClient { get; set; }

    [Parameter]
    public string URL { get; set; } = "";

    MarkdownPipeline pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();

    string _markup = "";
    bool _shouldRender = true;
    string _markDown = "";
    string _markDownSection = "";
    Uri? _markDownUri { get; set; }



    protected override async Task OnParametersSetAsync()
    {
        _markDownUri = string.IsNullOrEmpty(URL) ? null : new Uri(URL);
        await LoadMarkdown();
        _shouldRender = true;
        await base.OnParametersSetAsync();
    }

    public class MarkdownSection
    {
        public MarkdownSection? Parent { get; set; }
        public List<MarkdownSection> Children { get; set; } = new List<MarkdownSection>();
        public string SectionNameFull { get; set; } = "";
        public string SectionName { get; set; } = "";
        public int SectionDepth { get; set; }
        public StringBuilder sb = new StringBuilder();
        public string MarkDown => sb.ToString();
        public string MarkDownFull => GetFullSection();

        public string GetFullSection()
        {
            var sections = new List<MarkdownSection>{ this };
            sections.AddRange(Children.SelectMany(o => o.Children).ToList());
            var sb = new StringBuilder();
            sections.ForEach(o => sb.AppendLine(o.MarkDown));
            return sb.ToString();
        }

        public static List<MarkdownSection> Parse(string markDown)
        {
            markDown = markDown.Trim();
            //var stringLineEnding = "\n";
            //if (markDown.Contains("\r\n")) stringLineEnding = "\r\n";
            //if (markDown.Contains("\r")) stringLineEnding = "\r";
            var lines = markDown.Replace("\r\n", "\n").Replace("\r", "\n").Split("\n");
            var sections = new List<MarkdownSection>();
            MarkdownSection? section = null;
            foreach (var line in lines)
            {
                var tmp = Regex.Replace(line, "[^a-zA-Z-#]", "").ToLowerInvariant();
                var m = Regex.Match(tmp, @"^(#+)([^\s]+)$");
                if (m.Success)
                {
                    // new section
                    section = new MarkdownSection();
                    section.SectionName = m.Groups[2].Value;
                    section.SectionDepth = m.Groups[1].Value.Length;
                    m = Regex.Match(line.Trim(), @"^(#+)(.+)$");
                    section.SectionNameFull = m.Success ? m.Groups[2].Value.Trim() : "";
                    section.Parent = sections.Where(o => o.SectionDepth < section.SectionDepth).LastOrDefault();
                    if (section.Parent != null)
                    {
                        section.Parent.Children.Add(section);
                    }
                    sections.Add(section);
                }
                if (section == null)
                {
                    section = new MarkdownSection();
                    sections.Add(section);
                }
                section.sb.AppendLine(line);
            }
            return sections;
        }
    }

    async Task LoadMarkdown()
    {
        var markDown = "";
        if (_markDownUri != null)
        {
            try
            {
                markDown = await httpClient.GetStringAsync(_markDownUri);
            }
            catch (Exception ex)
            {
                JS.Log($"Exception: {ex.Message}");
            }
            if (!string.IsNullOrEmpty(_markDownUri.Fragment))
            {
                var frag = _markDownUri.Fragment.ToLowerInvariant().Trim('#');
                var sections = MarkdownSection.Parse(markDown);
                var section = sections.Where(o => o.SectionName.Equals(frag, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
                markDown = section == null ? "" : section.MarkDownFull;
            }
            _markup = Markdown.ToHtml(markDown, pipeline);
        }
        if (!string.IsNullOrEmpty(markDown)) _markDown = markDown;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (_shouldRender)
        {
            // render complete. disable further rerenders until params change
            _shouldRender = false;
        }
    }

    protected override bool ShouldRender()
    {
        return _shouldRender;
    }
}

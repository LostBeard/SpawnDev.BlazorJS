@using System.Reflection
@page "/JSObjectTypeInfo/{Name?}"

<div style="max-width: 100%;">
    <div style="display: flex; flex-direction: row; max-width: 100%;">
        <div style="flex-grow: 0; flex-shrink: 1; background-color: #181818; border-radius: 1rem; padding: 1rem;">
            <div style="text-align: center;">
                <h3>JSObjects</h3>
            </div>
            <ul>
                @foreach (var jst in JSObjectTypes)
                {
                    <li>
                        <a href="@JSObjectInfoHref(jst)">@jst.GetFormattedName()</a>
                    </li>
                }
            </ul>
        </div>
        <div style="padding: 1rem; position: relative; width: 100%; height: 100%;">
            <div style="padding: 1rem; position: absolute; width: 100%; height: 100%;">
                @if (Type == null)
                {
                    <MarkdownBlock URL="https://raw.githubusercontent.com/LostBeard/SpawnDev.BlazorJS/main/README.md#jsobjectbaseclass" />
                }
                else
                {
                    var baseTypeNames = Type.GetBaseTypes().Where(o => o != typeof(object)).ToList();
                    var baseTypeName = string.Join(", ", Type.GetBaseTypes().Where(o => o != typeof(object)).Select(o => o.GetFormattedName()));
                    <h3>@Type.GetFormattedName()</h3>
                    <div>
                        BaseType:
                        @foreach (var baseType in baseTypeNames)
                        {
                            if (baseType != baseTypeNames.Last())
                            {
                                <a href="@JSObjectInfoHref(baseType)">@baseType.GetFormattedName(), </a>
                            }
                            else
                            {
                                <a href="@JSObjectInfoHref(baseType)">@baseType.GetFormattedName()</a>
                            }
                        }
                    </div>

                    <h2>Constructors</h2>
                    foreach (var prop in Type.GetConstructors(BindingFlags.Instance | BindingFlags.Public))
                    {
                        var paramStr = string.Join(", ", prop.GetParameters().Select(o => ParameterInfoToString(o)));
                        <div>
                            @(Type.GetFormattedName())(@paramStr)
                        </div>
                    }
                    // instance
                    <h2>Instance Properties</h2>
                    <table>
                        <tr>
                            <th>Type</th>
                            <th>Property</th>
                            <th>Declaring Type</th>
                        </tr>
                        @foreach (var prop in Type.GetProperties(BindingFlags.Instance | BindingFlags.Public))
                        {
                            if (prop.IsSpecialName) continue;
                            if (prop.DeclaringType == typeof(object)) continue;
                            var getSetStr = "";
                            if (prop.CanRead && prop.CanWrite) getSetStr += "{ get; set; }";
                            else if (prop.CanRead) getSetStr += "{ get; }";
                            else if (prop.CanWrite) getSetStr += "{ set; }";
                            var isDerivedProp = prop.DeclaringType != Type;
                            <tr>
                                <td>@prop.PropertyType.GetFormattedName()</td>
                                <td>@prop.Name @getSetStr</td>
                                <td>
                                    @if (isDerivedProp)
                                    {
                                        <a href="@JSObjectInfoHref(prop.DeclaringType)">@prop.DeclaringType.GetFormattedName()</a>
                                    }
                                    else
                                    {
                                        <span>@prop.DeclaringType.GetFormattedName()</span>
                                    }
                                </td>
                            </tr>
                        }
                    </table>
                    <h2>Instance Methods</h2>
                    <table>
                        <tr>
                            <th>Return Type</th>
                            <th>Method</th>
                            <th>Declaring Type</th>
                        </tr>
                        @foreach (var prop in Type.GetMethods(BindingFlags.Instance | BindingFlags.Public))
                        {
                            if (prop.IsSpecialName) continue;
                            if (prop.DeclaringType == typeof(object)) continue;
                            var paramStr = string.Join(", ", prop.GetParameters().Select(o => ParameterInfoToString(o)));
                            var isDerivedProp = prop.DeclaringType != Type;
                            <tr>
                                <td>@prop.ReturnType.GetFormattedName()</td>
                                <td>@(prop.GetFormattedName())(@paramStr)</td>
                                <td>
                                    @if (isDerivedProp)
                                    {
                                        <a href="@JSObjectInfoHref(prop.DeclaringType)">@prop.DeclaringType.GetFormattedName()</a>
                                    }
                                    else
                                    {
                                        <span>@prop.DeclaringType.GetFormattedName()</span>
                                    }
                                </td>
                            </tr>
                        }
                    </table>
                    // static
                    <h2>Static Properties</h2>
                    <table>
                        <tr>
                            <th>Type</th>
                            <th>Property</th>
                            <th>Declaring Type</th>
                        </tr>
                        @foreach (var prop in Type.GetProperties(BindingFlags.Static | BindingFlags.Public))
                        {
                            if (prop.IsSpecialName) continue;
                            if (prop.DeclaringType == typeof(object)) continue;
                            var getSetStr = "";
                            if (prop.CanRead && prop.CanWrite) getSetStr += "{ get; set; }";
                            else if (prop.CanRead) getSetStr += "{ get; }";
                            else if (prop.CanWrite) getSetStr += "{ set; }";
                            var isDerivedProp = prop.DeclaringType != Type;
                            <tr>
                                <td>@prop.PropertyType.GetFormattedName()</td>
                                <td>@prop.Name @getSetStr</td>
                                <td>
                                    @if (isDerivedProp)
                                    {
                                        <a href="@JSObjectInfoHref(prop.DeclaringType)">@prop.DeclaringType.GetFormattedName()</a>
                                    }
                                    else
                                    {
                                        <span>@prop.DeclaringType.GetFormattedName()</span>
                                    }
                                </td>
                            </tr>
                        }
                    </table>
                    <h2>Static Methods</h2>
                    <table>
                        <tr>
                            <th>Return Type</th>
                            <th>Method</th>
                            <th>Declaring Type</th>
                        </tr>
                        @foreach (var prop in Type.GetMethods(BindingFlags.Static | BindingFlags.Public))
                        {
                            if (prop.IsSpecialName) continue;
                            if (prop.DeclaringType == typeof(object)) continue;
                            var paramStr = string.Join(", ", prop.GetParameters().Select(o => ParameterInfoToString(o)));
                            var isDerivedProp = prop.DeclaringType != Type;
                            <tr>
                                <td>@prop.ReturnType.GetFormattedName()</td>
                                <td>@(prop.GetFormattedName())(@paramStr)</td>
                                <td>
                                    @if (isDerivedProp)
                                    {
                                        <a href="@JSObjectInfoHref(prop.DeclaringType)">@prop.DeclaringType.GetFormattedName()</a>
                                    }
                                    else
                                    {
                                        <span>@prop.DeclaringType.GetFormattedName()</span>
                                    }
                                </td>
                            </tr>
                        }
                    </table>
                }
            </div>
        </div>
    </div>
</div>

@code {

}

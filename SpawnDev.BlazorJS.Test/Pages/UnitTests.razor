@using SpawnDev.Blazor.UnitTesting;
@using System.Reflection;
@using SpawnDev.BlazorJS.Reflection;

@page "/UnitTests"

<h3>Unit Tests for SpawnDev.BlazorJS</h3>
<p>
    This page runs tests to verify SpawnDev.BlazorJS is working as expected.
</p>

<UnitTestsView TypeInstanceResolver="TestTypeResolver" TestAssemblies="Assemblies" TestTypes="Types"></UnitTestsView>

@code {

    [Inject]
    BlazorJSRuntime JS { get; set; }

    [Inject]
    WebWorkerService WebWorkerService { get; set; }

    [Inject]
    AsyncCallDispatcherTest CallDispatcherBaseTestClass { get; set; }

    [Inject]
    IMathsService MathService { get; set; }

    IEnumerable<Assembly>? Assemblies = new List<Assembly>();
    IEnumerable<Type>? Types = new List<Type>();

    protected override void OnInitialized()
    {
        Types = new List<Type> {
            this.GetType(),
        };
        Assemblies = new List<Assembly> {
            //typeof(UnitTestsView).Assembly,
            typeof(UnitTests).Assembly
        };
    }

    object? TestTypeResolver(Type testType)
    {
        if (testType == this.GetType()) return this;
        return null;
    }



    [TestMethod]
    public async Task TaskPoolFullTest()
    {
        if (!WebWorkerService.WebWorkerSupported)
        {
            throw new Exception("Worker not supported by browser. Expected failure.");
        }
        await CallDispatcherBaseTestClass.Test(WebWorkerService.TaskPool);
    }

    [TestMethod]
    public async Task TaskPoolExpressionTest()
    {
        if (!WebWorkerService.WebWorkerSupported)
        {
            throw new Exception("Worker not supported by browser. Expected failure.");
        }
        // static methods of any class can be called
        // private static methods must be called from inside the class
        // public static methods can be called from outside the class
        var remoteInstanceId = await WebWorkerService.TaskPool.Run(() => ThisMethodWillGetCalledInAWorker(null!, JS.GlobalThisTypeName, JS.InstanceId));
        Console.WriteLine($"{BlazorJSRuntime.JS.GlobalThisTypeName} {BlazorJSRuntime.JS.InstanceId} {remoteInstanceId}");
    }

    // The below region is used to test Func<> callbacks in WebWorker calls.
    // Currently Func<> is not supported, only Actions are supported
    // When support has been added for Func the below methods can be uncommented to enable testing
    #region Test WebWorker Func callback parameter
    // // *********** Func<> ***********
    // [TestMethod]
    // public async Task TaskPoolExpressionFuncTest()
    // {
    //     if (!WebWorkerService.WebWorkerSupported)
    //     {
    //         throw new Exception("Worker not supported by browser. Expected failure.");
    //     }
    //     var dataString = Guid.NewGuid().ToString();
    //     var callbackFunc = () => dataString;
    //     var dataStringRet = await WebWorkerService.TaskPool.Run(() => ThisMethodWillGetCalledInAWorker(callbackFunc));
    //     if (dataString != dataStringRet)
    //     {
    //         throw new Exception("Func<string> call failed");
    //     }
    // }
    // private static string ThisMethodWillGetCalledInAWorker(Func<string> funcCallback)
    // {
    //     return funcCallback();
    // }
    #endregion

    #region TestWindowTask access of Window scope static property
    [TestMethod]
    public async Task TaskPoolExpressionStaticPropertyReadToCancelTest()
    {
        if (!WebWorkerService.WebWorkerSupported)
        {
            throw new Exception("Worker not supported by browser. Expected failure.");
        }
        CancelWorkers = false;
        // CancelWorkers will be set to true on the window scope after 2000 seconds
        // the WebWorker task will read this property every so often to check if it should continue running
        using var cts = new CancellationTokenSource(2000);
        cts.Token.Register(() => CancelWorkers = true);
        var cancelled = await WebWorkerService.TaskPool.Run(() => ThisMethodWillGetCalledInAWorker(null!, 10000));
        if (!cancelled)
        {
            throw new Exception("Test failed");
        }
    }
    // This property will be set on the Window scope and read by the WebWorker scope
    static bool CancelWorkers { get; set; } = false;

    // Method returns true if it was cancelled, false if it ran until completion
    private static async Task<bool> ThisMethodWillGetCalledInAWorker([FromServices] WebWorkerService webWorkerService, double maxRunTimeMS)
    {
        var startTime = DateTime.Now;
        var maxRunTime = TimeSpan.FromMilliseconds(maxRunTimeMS);
        while (DateTime.Now - startTime < maxRunTime)
        {
            Console.WriteLine("Waiting");
            await Task.Delay(50);
            var cancelled = await webWorkerService.WindowTask!.Run(() => CancelWorkers);
            if (cancelled) return true;
        }
        return false;
    }
    #endregion

    #region Test WebWorker CancellationToken parameter
    // *********** CancellationToken ***********
    [TestMethod]
    public async Task TaskPoolExpressionWithCancellationTokenTest2()
    {
        if (!WebWorkerService.WebWorkerSupported)
        {
            throw new Exception("Worker not supported by browser. Expected failure.");
        }
        using var cts = new CancellationTokenSource(2000);
        var cancelled = await WebWorkerService.TaskPool.Run(() => CancellableMethod(10000, cts.Token));
        if (!cancelled) throw new Exception("Task Cancellation failed");
    }
    // Returns true if cancelled
    private static async Task<bool> CancellableMethod(double maxRunTimeMS, CancellationToken token)
    {
        var startTime = DateTime.Now;
        var maxRunTime = TimeSpan.FromMilliseconds(maxRunTimeMS);
        while (DateTime.Now - startTime < maxRunTime)
        {
            // do some work ...
            // check if cancelled using IsCancellationRequestedAsync extension method
            // internally calls Task.Delay(1) to allow event handlers time to receive a cancel message
            if (await token.IsCancellationRequestedAsync()) return true;
        }
        return false;
    }

    [TestMethod]
    public async Task TaskPoolExpressionWithCancellationTokenTest()
    {
        if (!WebWorkerService.WebWorkerSupported)
        {
            throw new Exception("Worker not supported by browser. Expected failure.");
        }
        using var cts = new CancellationTokenSource(4000);
        try
        {
            await WebWorkerService.TaskPool.Run(() => ThisMethodWillGetCalledInAWorker(10000, cts.Token));
            Console.WriteLine($"Task Cancellation failed");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Success. The task was cancelled");
            return;
        }
        throw new Exception("Task Cancellation failed");
    }
    [TestMethod]
    public async Task TaskPoolExpressionWithCancellationTokenPreCancelledTest()
    {
        if (!WebWorkerService.WebWorkerSupported)
        {
            throw new Exception("Worker not supported by browser. Expected failure.");
        }
        var cancelledToken = new CancellationToken(true);
        try
        {
            await WebWorkerService.TaskPool.Run(() => ThisMethodWillGetCalledInAWorker(5000, cancelledToken));
            Console.WriteLine($"Task Cancellation failed");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Success. The task was cancelled");
            return;
        }
        throw new Exception("Task Cancellation failed");
    }
    [TestMethod]
    public async Task TaskPoolExpressionWithCancellationTokenNoneTest()
    {
        if (!WebWorkerService.WebWorkerSupported)
        {
            throw new Exception("Worker not supported by browser. Expected failure.");
        }
        await WebWorkerService.TaskPool.Run(() => ThisMethodWillGetCalledInAWorker(2000, CancellationToken.None));
        Console.WriteLine($"Success. The task ran to completion.");
    }
    private static async Task ThisMethodWillGetCalledInAWorker(double maxRunTimeMS, CancellationToken token)
    {
        Console.WriteLine($"maxRunTimeMS: {maxRunTimeMS} token.CanBeCanceled: {token.CanBeCanceled} token.IsCancellationRequested: {token.IsCancellationRequested}");
        var startTime = DateTime.Now;
        var maxRunTime = TimeSpan.FromMilliseconds(maxRunTimeMS);
        while (DateTime.Now - startTime < maxRunTime)
        {
            Console.WriteLine("Waiting");
            // do some fake work
            await Task.Delay(50);
            // check if cancellation message received
            await token.ThrowIfCancellationRequestedAsync();
        }
    }
    [TestMethod]
    public async Task WebWorkerCancellationTokenAlreadyCancelledTest()
    {
        if (!WebWorkerService.WebWorkerSupported)
        {
            throw new Exception("Worker not supported by browser. Expected failure.");
        }
        var methodInfo = typeof(MathsService).GetMethod("CancellationTokenTest");
        using var worker = await WebWorkerService.GetWebWorker();
        var cancelledToken = new CancellationToken(true);
        try
        {
            await worker!.Call(methodInfo!, new object[] { 5000d, cancelledToken });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Success. The task was cancelled: {ex.Message}");
            return;
        }
        throw new Exception("Task Cancellation failed");
    }
    #endregion

    private static string ThisMethodWillGetCalledInAWorker([FromServices] BlazorJSRuntime JS, string callingScope, string instanceId)
    {
        Console.WriteLine($"{JS.GlobalThisTypeName} {JS.InstanceId} {callingScope} {instanceId}");
        return JS.InstanceId;
    }

    [TestMethod]
    public async Task WebWorkerAppSettingsReadTest()
    {
        if (!WebWorkerService.WebWorkerSupported)
        {
            throw new Exception("Worker not supported by browser. Expected failure.");
        }
        // test key to read from appsettings.json
        var testKey = "Message";
        // get value loaded in this context to compare to worker returned value
        var testValueWindow = await MathService.ReadAppSettingsValue(testKey);
        // get worker and read the value fro mthat context
        using var worker = await WebWorkerService.GetWebWorker();
        var mathService = worker.GetService<IMathsService>();
        var testValueWorker = await mathService.ReadAppSettingsValue(testKey);
        // compare
        if (testValueWorker != testValueWindow) throw new Exception("Unexpected result");
        Console.WriteLine($"WebWorkerAppSettingsReadTest value: {testValueWorker}");
    }

    [TestMethod]
    public async Task WebWorkerTestMultiSigMethods()
    {
        if (!WebWorkerService.WebWorkerSupported)
        {
            throw new Exception("Worker not supported by browser. Expected failure.");
        }
        using var worker = await WebWorkerService.GetWebWorker();
        var mathService = worker.GetService<IMathsService>();
        var strValueOrig = "apples";
        var dblValueOrig = Math.PI;

        // test call IMathsService.TestMultiSigMethod which has 3 signatures total.

        // this call is intended for the only method with this name and 2 arguments.
        var twoArgReadBack = await mathService.TestMultiSigMethod(strValueOrig, dblValueOrig);
        var twoArgReadBackExpected = strValueOrig + " " + dblValueOrig;
        if (twoArgReadBack != twoArgReadBackExpected) throw new Exception("Call to worker TestMultiSigMethod with unique number of arguments failed");

        // test call IMathsService.TestMultiSigMethod which has two signatures with the same number of arguments

        // this call intended for the one with a string argument.
        var strValueReadBack = await mathService.TestMultiSigMethod(strValueOrig);
        if (strValueOrig != strValueReadBack) throw new Exception("Call to worker TestMultiSigMethod with 1 argument failed with string");

        // this call intended for the one with a double argument.
        var dblValueReadBack = await mathService.TestMultiSigMethod(dblValueOrig);
        if (dblValueOrig != dblValueReadBack) throw new Exception("Call to worker TestMultiSigMethod with 1 argument failed with double");
    }

    [TestMethod]
    public async Task WebWorkerGenericsTest()
    {
        if (!WebWorkerService.WebWorkerSupported)
        {
            throw new Exception("Worker not supported by browser. Expected failure.");
        }
        using var worker = await WebWorkerService.GetWebWorker();
        var mathService = worker.GetService<IMathsService>();
        var value1 = "apples";
        var value2 = 42;
        var value2ReadBack = await mathService.TestGenerics<string, int>(value1, value2);
        if (value2ReadBack != value2) throw new Exception("Unexpected result");
    }

    [TestMethod]
    public async Task WebWorkerTest()
    {
        if (!WebWorkerService.WebWorkerSupported)
        {
            throw new Exception("Worker not supported by browser. Expected failure.");
        }
        using var worker = await WebWorkerService.GetWebWorker();
        var mathService = worker.GetService<IMathsService>();
        var randValue = Guid.NewGuid().ToString();
        await mathService.SetValueTest(randValue);
        var readBack = await mathService.GetValueTest();
        if (readBack != randValue) throw new Exception("Unexpected result");
    }

    [TestMethod]
    public async Task WebWorkersTest()
    {
        if (!WebWorkerService.WebWorkerSupported)
        {
            throw new Exception("Worker not supported by browser. Expected failure.");
        }
        using var workerA = await WebWorkerService.GetWebWorker();
        using var workerB = await WebWorkerService.GetWebWorker();
        var mathServiceA = workerA.GetService<IMathsService>();
        var mathServiceB = workerB.GetService<IMathsService>();
        var randValue = Guid.NewGuid().ToString();
        await mathServiceA.SetValueTest(randValue);
        var readBack = await mathServiceB.GetValueTest();
        if (readBack == randValue) throw new Exception("Unexpected result");
    }

    [TestMethod]
    public async Task SharedWebWorkerTest()
    {
        if (!WebWorkerService.SharedWebWorkerSupported)
        {
            throw new Exception("SharedWorker not supported by browser. Expected failure.");
        }

        var thisInstanceId = JS.InstanceId;

        using var worker = await WebWorkerService.GetSharedWebWorker();

        var workerInstanceId = await worker.Run(() => JS.InstanceId);
        Console.WriteLine($"thisInstanceId: {thisInstanceId}");
        Console.WriteLine($"workerInstanceId: {workerInstanceId}");


        var mathService = worker.GetService<IMathsService>();
        var randValue = Guid.NewGuid().ToString();
        await mathService.SetValueTest(randValue);
        var readBack = await mathService.GetValueTest();
        Console.WriteLine($"SharedWebWorkerTest: {readBack}");
        if (readBack != randValue) throw new Exception("Unexpected result");
    }

    [TestMethod]
    public async Task SharedWebWorkersByName()
    {
        if (!WebWorkerService.SharedWebWorkerSupported)
        {
            throw new Exception("SharedWorker not supported by browser. Expected failure.");
        }
        // workerA1 and workerA2 will refer to the same shared worker
        // workerB is a separate worker instance
        using var workerA1 = await WebWorkerService.GetSharedWebWorker("workerA");
        using var workerA2 = await WebWorkerService.GetSharedWebWorker("workerA");
        using var workerB = await WebWorkerService.GetSharedWebWorker("workerB");
        var mathServiceA1 = workerA1.GetService<IMathsService>();
        var mathServiceA2 = workerA2.GetService<IMathsService>();
        var mathServiceB = workerB.GetService<IMathsService>();
        var valueSetWorkerA1 = Guid.NewGuid().ToString();
        await mathServiceA1.SetValueTest(valueSetWorkerA1);
        var valueGetWorkerB = await mathServiceB.GetValueTest();
        var valueGetWorkerA1 = await mathServiceA1.GetValueTest();
        var valueGetWorkerA2 = await mathServiceA2.GetValueTest();
        if (valueGetWorkerA1 != valueSetWorkerA1) throw new Exception("Unexpected result");
        if (valueGetWorkerA2 != valueSetWorkerA1) throw new Exception("SharedWorker appears not shared");
        if (valueGetWorkerB == valueSetWorkerA1) throw new Exception("SharedWorker with different name unexpectedly same as first SharedWorker");
    }

    [TestMethod]
    public async Task SubtleCryptoRsaOaepEncryptDecryptTest()
    {
        if (!Crypto.IsSupported)
        {
            throw new Exception("Crypto not supported by browser.");
        }
        using var crypto = new Crypto();
        using var subtle = crypto.Subtle;
        var keyPair = await subtle.GenerateKey<CryptoKeyPair>(
            new RsaHashedKeyGenParams
                {
                    Name = "RSA-OAEP",
                    ModulusLength = 4096,
                    PublicExponent = new byte[] { 1, 0, 1 },
                    Hash = "SHA-256"
                },
            true,
            new string[] { "encrypt", "decrypt" }
        );
        var testString = "Hello Crypto!";
        var encryptedText = await EncryptDataWithPublicKey(testString, keyPair.PublicKey);
        var decryptedText = await DecryptDataWithPrivateKey(encryptedText, keyPair.PrivateKey);
        if (testString != decryptedText) throw new Exception("Unexpected result");

        // Now test exporting and then importing the private key (for testing only)
        // export private key
        var privateKey = await subtle.ExportKey<ArrayBuffer>("pkcs8", keyPair.PrivateKey);
        // convert exported private key to a base64 string
        var stringPrivateKey = ArrayBufferToBase64(privateKey);

        // now the import steps from string
        // convert base64 private key string back to ArrayBuffer
        var arrayBufferPrivateKey = Base64ToArrayBuffer(stringPrivateKey);
        // import private key from ArrayBuffer
        var privateKeyImported = await subtle.ImportKey("pkcs8", arrayBufferPrivateKey, new RsaHashedImportParams { Name = "RSA-OAEP", Hash = "SHA-256" }, true, new string[] { "decrypt" });

        // use the imported key (should provide same results as above)
        // convert encrypted ArrayBuffer to base64 string
        var encryptedTextBase64 = ArrayBufferToBase64(encryptedText);

        // convert encrypted base64 string to ArrayBuffer

        // fetch based Base64ToArrayBuffer implementation - Not CSP compatible (for testing only)
        //var encryptedArrayBuffer = await Base64ToArrayBufferFetch(encryptedTextBase64);

        // atob based Base64ToArrayBuffer implementation - CSP compatible (for testing only)
        //var encryptedArrayBuffer = Base64ToArrayBufferAtoB(encryptedTextBase64);

        // C# based Base64ToArrayBuffer - CSP compatible
        var encryptedArrayBuffer = Base64ToArrayBuffer(encryptedTextBase64);

        // decrypt using imported private key
        var decryptedText2AB = await subtle.Decrypt(new EncryptParams { Name = "RSA-OAEP" }, privateKeyImported, encryptedArrayBuffer);
        var decryptedText2 = await ArrayBufferToString(decryptedText2AB);
        if (testString != decryptedText2) throw new Exception("Unexpected result");
    }

    async Task<ArrayBuffer> EncryptDataWithPublicKey(string data, CryptoKey key)
    {
        using var crypto = new Crypto();
        using var subtle = crypto.Subtle;
        var dataAB = await StringToArrayBuffer(data);
        var ret = await subtle.Encrypt(new EncryptParams { Name = "RSA-OAEP" }, key, dataAB);
        return ret;
    }

    async Task<string> DecryptDataWithPrivateKey(ArrayBuffer data, CryptoKey key)
    {
        using var crypto = new Crypto();
        using var subtle = crypto.Subtle;
        var ret = await subtle.Decrypt(new EncryptParams { Name = "RSA-OAEP" }, key, data);
        var dataStr = await ArrayBufferToString(ret);
        return dataStr;
    }

    async Task<ArrayBuffer> StringToArrayBuffer(string data)
    {
        using var blob = new Blob(new string[] { data }, new BlobOptions { Type = "text/plain; charset=utf-8" });
        return await blob.ArrayBuffer();
    }

    async Task<string> ArrayBufferToString(ArrayBuffer data)
    {
        using var blob = new Blob(new ArrayBuffer[] { data });
        return await blob.Text();
    }

    string ArrayBufferToBase64(ArrayBuffer arrayBuffer)
    {
        var bytes = arrayBuffer.ReadBytes();
        return Convert.ToBase64String(bytes);
    }

    ArrayBuffer Base64ToArrayBuffer(string base64String)
    {
        var bytes = Convert.FromBase64String(base64String);
        using var uint8Array = new Uint8Array(bytes);
        return uint8Array.Buffer;
    }

    async Task<ArrayBuffer> Base64ToArrayBufferFetch(string base64String)
    {
        var resp = await JS.Fetch($"data:application/octet-binary;base64,{base64String}");
        return await resp.ArrayBuffer();
    }

    ArrayBuffer Base64ToArrayBufferAtoB(string base64String)
    {
        // this method is for testing purposes only.
        var binaryString = JS.Call<JSObject>("atob", base64String);
        JS.Set("_binaryString", binaryString);
        var length = binaryString.JSRef.Get<int>("length");
        var arrayBuffer = new ArrayBuffer(length);
        var uint8Array = new Uint8Array(arrayBuffer);
        for (var i = 0; i < length; i++)
        {
            uint8Array[i] = binaryString.JSRef.Call<byte>("charCodeAt", i);
        }
        return arrayBuffer;
    }

    [TestMethod]
    public async Task TestSymbolsAndAsyncIterator()
    {
        var obj = JS.Get<JSObject>("delayedResponses");
        var asyncIterator = obj.JSRef.Call<AsyncIterator>(Symbol.AsyncIterator);
        IteratorResult? result = await asyncIterator.Next();
        while (!result.Done)
        {
            JS.Log("Result: ", result.GetValue<JSObject>());
            result = await asyncIterator.Next();
        }
        JS.Log("Done");
    }

    #region SharedCancellationTokenSource Test

    [TestMethod]
    public async Task WebWorkerSharedCancellationTokenSourceTest()
    {
        if (!WebWorkerService.WebWorkerSupported)
        {
            throw new NotSupportedException("Worker not supported by browser. Expected failure.");
        }

        if (!JS.CrossOriginIsolated)
        {
            throw new NotSupportedException("Not CrossOriginIsolated. Expected failure.");
        }
        var retd = -2;
        var loops = 0;
        using (var cts = new SharedCancellationTokenSource())
        {
            var token = cts.Token;
            var runningTask = WebWorkerService.TaskPool.Run(() => AssembleSyncXXX(token));
            while (true)
            {
                ++loops;
                try
                {
                    retd = await runningTask.WaitAsync(TimeSpan.FromMilliseconds(10));
                    break;
                }
                catch (TimeoutException) { }
                cts.Cancel();
            }
        }
        Console.WriteLine($"main retd: {retd}, loops: {loops}");
    }
    static int AssembleSyncXXX(SharedCancellationToken token)
    {
        for (var i = 0; i < 100000000; i++)
        {
            if (token.IsCancellationRequested) return i;
        }
        return -42;
    }

    public async Task WebWorkerSharedCancellationTokenTest()
    {
        if (!WebWorkerService.WebWorkerSupported)
        {
            throw new Exception("Worker not supported by browser. Expected failure.");
        }
        // Cancel the task after 2 seconds
        using var cts = new SharedCancellationTokenSource(2000);
        var i = await WebWorkerService.TaskPool.Run(() => CancellableMethod(10000, cts.Token));
        if (i == -1) throw new Exception("Task Cancellation failed");
    }

    // Returns -1 if not cancelled
    // This method will run for 10 seconds if not cancelled
    private static async Task<long> CancellableMethod(double maxRunTimeMS, SharedCancellationToken token)
    {
        var startTime = DateTime.Now;
        var maxRunTime = TimeSpan.FromMilliseconds(maxRunTimeMS);
        long i = 0;
        while (DateTime.Now - startTime < maxRunTime)
        {
            // do some work ...
            i += 1;
            // check if cancelled message received
            if (token.IsCancellationRequested) return i;
        }
        return -1;
    }
    #endregion
}
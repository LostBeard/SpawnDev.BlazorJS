@page "/SharedWebWorker"

<PageTitle>WebWorker</PageTitle>

@inject WebWorkerService webWorkerService
@inject MathsService mathsService

<div class="row">
    <div class="col-5 col-xs-12">
        <h1>SpawnDev.BlazorJS.WebWorkers.WebWorker</h1>
        <br /><br />
        Calculate Pi to N decimal places<br />
        <input type="text" @bind="piDecimalPlaces" placeholder="decimal places" /><br />
        <progress max=@piDecimalPlaces value="@piProgress" /><br /><br />
        <button disabled=@RunDisabled @onclick=OnClick class="btn btn-primary">Run test</button><br /><br />
        <button disabled="@canDisposeWorker" @onclick="OnDisposeWorker" class="btn btn-secondary">Dispose Worker</button><br />
        <br />
        <br />
        <strong>Output:</strong>
        <hr />
        <pre style="min-width: 800px; min-height: 300px;">
            @output
        </pre>
    </div>
</div>
@code {
    int piDecimalPlaces = 3000;
    int piProgress = 0;
    string output = "";
    SharedWebWorker? sharedWebWorker;
    string? canDisposeWorker => sharedWebWorker != null ? null : "disabled";
    string? RunDisabled => Running ? "disabled" : null;
    bool Running = false;
   string rn = Environment.NewLine;

    public async Task OnClick(EventArgs _)
    {
        Running = true;
        output = "";
        try
        {
            var sw = new System.Diagnostics.Stopwatch();
            if (sharedWebWorker == null)
            {
                output = $"{rn}{LogDate()} Creating WebWorker...";
                StateHasChanged();
                sw.Start();
                sharedWebWorker = await webWorkerService.GetSharedWebWorker();
                sw.Stop();
                output += $"{rn}{LogDate()} Background service created in {sw.ElapsedMilliseconds}ms";
                StateHasChanged();
            }
            output += $"{rn}{LogDate()} Calling EstimatePI({piDecimalPlaces})...";
            sw.Restart();
            // Actions can be passed for progress callbacks but they only live as long as the call itself does and can have at most 1 parameter
            var result = await sharedWebWorker.InvokeAsync<MathsService, string>(nameof(MathsService.CalculatePiWithActionProgress), piDecimalPlaces, new Action<int>((i) =>
            {
                piProgress = i;
                StateHasChanged();
            }));
            output += $"{rn}{LogDate()} EstimatePI({piDecimalPlaces}) = {result}";
            sw.Stop();
            output += $"{rn}{LogDate()} Computerd Pi to {piDecimalPlaces} places in {sw.ElapsedMilliseconds}ms";
            StateHasChanged();
        }
        catch (Exception e)
        {
            output = $"{rn}Error = {e}";
        }
        finally
        {
            Running = false;
        }
    }

    async Task OnWithoutThreadClicked()
    {
        var result = await mathsService.EstimatePI(piDecimalPlaces);
        output += $"{rn}{LogDate()} EstimatePI({piDecimalPlaces}) = {result}";
        StateHasChanged();
    }

    public void OnDisposeWorker()
    {
        sharedWebWorker?.Dispose();
        sharedWebWorker = null;
        Running = false;
    }

    private string LogDate()
    {
        return DateTime.Now.ToString("HH:mm:ss:fff");
    }
}

@page "/SharedWebWorker"
@inject WebWorkerService webWorkerService
@inject IMathsService mathsService

<PageTitle>SharedWebWorker</PageTitle>

<MarkdownBlock URL="https://raw.githubusercontent.com/LostBeard/SpawnDev.BlazorJS/main/README.md#SharedWebWorker" />

<div class="row">
    <div class="col-5 col-xs-12">
        <h2>Demo</h2>
        <br /><br />
        Calculate Pi to N decimal places<br />
        <input type="text" @bind="piDecimalPlaces" placeholder="decimal places" /><br />
        <progress max=@piDecimalPlaces value="@piProgress" /><br /><br />
        <div>While processing PI without a worker the main thread will be unresponsive</div>
        <button disabled=@RunDisabled @onclick=OnWithoutThreadClicked class="btn btn-primary">Without SharedWorker</button><br /><br />
        <div>While processing PI with a worker the main thread will stay responsive</div>
        <button disabled=@WorkerDisabled @onclick=OnWithThreadClicked class="btn btn-primary">With SharedWorker @(supported ? "" : " [ UNSUPPORTED ]")</button><br /><br />
        <button disabled=@canDisposeWorker @onclick="OnDisposeWorker" class="btn btn-secondary">Dispose SharedWorker</button><br />
        <strong>Output:</strong>
        <hr />
        <pre style="min-width: 800px; min-height: 300px;">
            @output
        </pre>
    </div>
</div>
@code {
    int piDecimalPlaces = 3000;
    int piProgress = 0;
    string output = "";
    SharedWebWorker? webWorker;
    string? canDisposeWorker => webWorker != null ? null : "disabled";
    string? RunDisabled => Running ? "disabled" : null;
    string? WorkerDisabled => Running || !supported ? "disabled" : null;
    bool supported => webWorkerService != null && webWorkerService.SharedWebWorkerSupported;
    bool Running = false;

    string rn = Environment.NewLine;

    async Task OnWithoutThreadClicked() {
        Running = true;
        StateHasChanged();
        var result = await mathsService.CalculatePi(piDecimalPlaces);
        output += $"{rn}{LogDate()} EstimatePI({piDecimalPlaces}) = {result}";
        Running = false;
        StateHasChanged();
    }

    async Task OnWithThreadClicked() {
        Running = true;
        StateHasChanged();
        if (webWorker == null) webWorker = await webWorkerService.GetSharedWebWorker();
        var mathsServiceWorker = webWorker.GetService<IMathsService>();
        var result = await mathsServiceWorker.CalculatePiWithActionProgress(piDecimalPlaces, new Action<int>((i) => {
            piProgress = i;
            StateHasChanged();
        }));
        output += $"{rn}{LogDate()} EstimatePI({piDecimalPlaces}) = {result}";
        Running = false;
        StateHasChanged();
    }

    public void OnDisposeWorker() {
        webWorker?.Dispose();
        webWorker = null;
        Running = false;
    }

    private string LogDate() {
        return DateTime.Now.ToString("HH:mm:ss:fff");
    }
}

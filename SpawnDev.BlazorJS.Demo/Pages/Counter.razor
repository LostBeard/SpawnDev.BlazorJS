@page "/counter"
@using SpawnDev.BlazorJS.JSObjects
@using SpawnDev.BlazorJS.Toolbox
@using System.Text

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="RunTests">Run Tests</button>

@code {
    private int currentCount = 0;

    [Inject]
    BlazorJSRuntime JS { get; set; } = default!;

    private async Task RunTests()
    {
        // create a test FileSystemFileHandle
        using var navigator = JS.Get<Navigator>("navigator");
        using var storage = navigator.Storage;
        using var root = await storage.GetDirectory();
        var exists1 = await root.FilePathExists("test.txt");
        if (exists1)
        {
            await root.RemovePath("test.txt");
        }
        var exists2 = await root.FilePathExists("test.txt");
        using var fileHandle = await root.GetPathFileHandle("test.txt", true);
        var exists3 = await root.FilePathExists("test.txt");
        //using var fileHandleB = await root.GetPathFileHandle("test2.txt", true);

        // await fileHandleB!.Write("Hello world!");
        // var startSize = await fileHandleB!.GetSize();
        // var fsStream = await fileHandle.CreateWritable(new FileSystemCreateWritableOptions { KeepExistingData = appendMode });
        // var writer = fsStream.GetWriter();

        using var memStreamA = new MemoryStream();
        using var memStreamB = new MemoryStream();

        memStreamA.Write(Encoding.ASCII.GetBytes("Hello ******"));
        memStreamB.Write(Encoding.ASCII.GetBytes("world!"));

        memStreamA.Position = 0;
        memStreamB.Position = 0;

        await fileHandle!.Write(memStreamA);
        await fileHandle!.Append(memStreamB);

        var readBack = await fileHandle!.ReadText();
        JS.Log("readBack", readBack);
        var nmt = true;

    }
}

using System.Text.Json.Serialization;

namespace SpawnDev.BlazorJS.JSObjects
{
    /// <summary>
    /// Options for CredentialsContainer.Create()<br /> 
    /// https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/create#publickey_object_structure
    /// </summary>
    public class CredentialCreatePublicKey
    {
        /// <summary>
        /// A String which indicates how the attestation (for the authenticator's origin) should be transported. Should be one of none, indirect, direct, or enterprise. The default value is none<br />
        /// The value can be one of the following:<br />
        /// "none" - Specifies that the relying party is not interested in authenticator attestation. This might be to avoid additional user consent for round trips to the relying party server to relay identifying information, or round trips to an attestation certificate authority (CA), with the aim of making the authentication process smoother. If "none" is chosen as the attestation value, and the authenticator signals that it uses a CA to generate its attestation statement, the client app will replace it with a "None" attestation statement, indicating that no attestation statement is available.<br />
        /// "direct" - Specifies that the relying party wants to receive the attestation statement as generated by the authenticator.<br />
        /// "enterprise" - Specifies that the Relying Party wants to receive an attestation statement that may include uniquely identifying information. This is intended for controlled deployments within an enterprise where the organization wishes to tie registrations to specific authenticators.<br />
        /// "indirect" - Specifies that the relying party wants to receive a verifiable attestation statement, but it will allow the client to decide how to receive it. For example, the client could choose to replace the authenticator's assertion statement with one generated by an Anonymization CA to protect user privacy.<br />
        /// If attestation is omitted, it will default to "none".
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Attestation { get; set; }
        /// <summary>
        /// An array of strings specifying the relying party's preference for the attestation statement format used by the authenticator. Values should be ordered from highest to lowest preference, and should be considered hints — the authenticator may choose to issue an attestation statement in a different format. For a list of valid formats, see WebAuthn Attestation Statement Format Identifiers.<br />
        /// If omitted, attestationFormats defaults to an empty array.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<string>? AttestationFormats { get; set; }
        /// <summary>
        /// An object whose properties are criteria used to filter out the potential authenticators for the credential creation operation. This object can contain the properties:
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public AuthenticatorSelection? AuthenticatorSelection { get; set; }
        /// <summary>
        /// An ArrayBuffer, TypedArray, or DataView provided by the relying party's server and used as a cryptographic challenge. This value will be signed by the authenticator and the signature will be sent back as part of AuthenticatorAttestationResponse.attestationObject.<br />
        /// 32 byte challenge. Must be randomly generated on the server.
        /// </summary>
        public Union<ArrayBuffer, Uint8Array, DataView, byte[]> Challenge { get; set; }
        /// <summary>
        /// An Array of objects describing existing credentials that are already mapped to this user account (as identified by user.id). This is provided by the relying party, and checked by the user agent to avoid creating a new public key credential on an authenticator that already has a credential mapped to the specified user account. for an existing user who already has some. 
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public IEnumerable<CredentialCreatePublicKeyExclude>? ExcludeCredentials { get; set; }
        /// <summary>
        /// An object containing properties representing the input values for any requested extensions. These extensions are used to specific additional processing by the client or authenticator during the credential creation process. Examples include specifying whether a returned credential is discoverable, or whether the relying party will be able to store large blob data associated with a credential.
        /// Extensions are optional and different browsers may recognize different extensions.Processing extensions is always optional for the client: if a browser does not recognize a given extension, it will just ignore it.For information on using extensions, and which ones are supported by which browsers, see Web Authentication extensions.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public object? Extensions { get; set; }
        /// <summary>
        /// An Array of objects which specify the key types and signature algorithms the Relying Party supports, ordered from most preferred to least preferred. The client and authenticator will make a best-effort to create a credential of the most preferred type possible. 
        /// </summary>
        public List<PublicKeyCredentialParameter> PubKeyCredParams { get; set; } = new List<PublicKeyCredentialParameter>();
        /// <summary>
        /// An object describing the relying party that requested the credential creation. It can contain the following properties:
        /// </summary>
        public RelyingParty Rp { get; set; }
        /// <summary>
        /// A numerical hint, in milliseconds, which indicates the time the caller is willing to wait for the creation operation to complete. This hint may be overridden by the browser.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public double? Timeout { get; set; }
        /// <summary>
        /// An object describing the user account for which the credential is generated
        /// </summary>
        public CredentialUser User { get; set; }
        /// <summary>
        /// An array of strings providing hints as to what authentication UI the user-agent should provide for the user.<br />
        /// The values can be any of the following:<br />
        /// "security-key" - Authentication requires a separate dedicated physical device to provide the key.<br />
        /// "client-device" - The user authenticates using their own device, such as a phone.<br />
        /// "hybrid" - Authentication relies on a combination of authorization/authentication methods, potentially relying on both user and server-based mechanisms.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<string>? Hints { get; set; }
    }
}

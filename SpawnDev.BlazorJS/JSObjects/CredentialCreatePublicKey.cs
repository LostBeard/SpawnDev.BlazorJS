using System.Text.Json.Serialization;

namespace SpawnDev.BlazorJS.JSObjects
{
    /// <summary>
    /// Options for CredentialsContainer.Create()<br /> 
    /// https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/create#publickey_object_structure
    /// </summary>
    public class CredentialCreatePublicKey
    {
        /// <summary>
        /// A String which indicates how the attestation (for the authenticator's origin) should be transported. Should be one of none, indirect, direct, or enterprise. The default value is none<br />
        /// The value can be one of the following:<br />
        /// "none" - Specifies that the relying party is not interested in authenticator attestation. This might be to avoid additional user consent for round trips to the relying party server to relay identifying information, or round trips to an attestation certificate authority (CA), with the aim of making the authentication process smoother. If "none" is chosen as the attestation value, and the authenticator signals that it uses a CA to generate its attestation statement, the client app will replace it with a "None" attestation statement, indicating that no attestation statement is available.<br />
        /// "direct" - Specifies that the relying party wants to receive the attestation statement as generated by the authenticator.<br />
        /// "enterprise" - Specifies that the Relying Party wants to receive an attestation statement that may include uniquely identifying information. This is intended for controlled deployments within an enterprise where the organization wishes to tie registrations to specific authenticators.<br />
        /// "indirect" - Specifies that the relying party wants to receive a verifiable attestation statement, but it will allow the client to decide how to receive it. For example, the client could choose to replace the authenticator's assertion statement with one generated by an Anonymization CA to protect user privacy.<br />
        /// If attestation is omitted, it will default to "none".
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Attestation { get; set; }
        /// <summary>
        /// An array of strings specifying the relying party's preference for the attestation statement format used by the authenticator. Values should be ordered from highest to lowest preference, and should be considered hints — the authenticator may choose to issue an attestation statement in a different format. For a list of valid formats, see WebAuthn Attestation Statement Format Identifiers.<br />
        /// If omitted, attestationFormats defaults to an empty array.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<string>? AttestationFormats { get; set; }
        /// <summary>
        /// An object whose properties are criteria used to filter out the potential authenticators for the credential creation operation. This object can contain the properties:
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public AuthenticatorSelection? AuthenticatorSelection { get; set; }

        /// <summary>
        /// 32 byte challenge. Must be randomly generated on the server.
        /// </summary>
        public byte[] Challenge { get; set; }
        public RelyingParty Rp { get; set; }
        /// <summary>
        /// An object describing the user account for which the credential is generated
        /// </summary>
        public CredentialUser User { get; set; }
        public List<PublicKeyCredentialParameters> PubKeyCredParams { get; set; } = new List<PublicKeyCredentialParameters>();
        /// <summary>
        /// A numerical hint, in milliseconds, which indicates the time the caller is willing to wait for the creation operation to complete. This hint may be overridden by the browser.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public double? Timeout { get; set; }


        // TODO - finish adding below 3 properties (part of Fido2 Asp.Net
        ///// <summary>
        ///// This member is intended for use by Relying Parties that wish to select the appropriate authenticators to participate in the create() operation.
        ///// </summary>
        //[JsonPropertyName("authenticatorSelection")]
        //public AuthenticatorSelection AuthenticatorSelection { get; set; }

        ///// <summary>
        ///// This member is intended for use by Relying Parties that wish to limit the creation of multiple credentials for the same account on a single authenticator.The client is requested to return an error if the new credential would be created on an authenticator that also contains one of the credentials enumerated in this parameter.
        ///// </summary>
        //[JsonPropertyName("excludeCredentials")]
        //public List<PublicKeyCredentialDescriptor> ExcludeCredentials { get; set; }

        ///// <summary>
        ///// This OPTIONAL member contains additional parameters requesting additional processing by the client and authenticator. For example, if transaction confirmation is sought from the user, then the prompt string might be included as an extension.
        ///// </summary>
        //[JsonPropertyName("extensions")]
        //[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        //public AuthenticationExtensionsClientInputs Extensions { get; set; }
    }
}
